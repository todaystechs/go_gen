// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: password.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ForgotPasswordData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordDataMultiError, or nil if none found.
func (m *ForgotPasswordData) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPasswordDataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPasswordDataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPasswordDataValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForgotPasswordDataMultiError(errors)
	}
	return nil
}

// ForgotPasswordDataMultiError is an error wrapping multiple validation errors
// returned by ForgotPasswordData.ValidateAll() if the designated constraints
// aren't met.
type ForgotPasswordDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordDataMultiError) AllErrors() []error { return m }

// ForgotPasswordDataValidationError is the validation error returned by
// ForgotPasswordData.Validate if the designated constraints aren't met.
type ForgotPasswordDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordDataValidationError) ErrorName() string {
	return "ForgotPasswordDataValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordDataValidationError{}

// Validate checks the field values on ForgotPasswordToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordTokenMultiError, or nil if none found.
func (m *ForgotPasswordToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssuedTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "IssuedTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "IssuedTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPasswordTokenValidationError{
				field:  "IssuedTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIssuedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "IssuedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "IssuedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPasswordTokenValidationError{
				field:  "IssuedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "ExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "ExpiresOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPasswordTokenValidationError{
				field:  "ExpiresOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPasswordTokenValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPasswordTokenValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForgotPasswordTokenMultiError(errors)
	}
	return nil
}

// ForgotPasswordTokenMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordToken.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordTokenMultiError) AllErrors() []error { return m }

// ForgotPasswordTokenValidationError is the validation error returned by
// ForgotPasswordToken.Validate if the designated constraints aren't met.
type ForgotPasswordTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordTokenValidationError) ErrorName() string {
	return "ForgotPasswordTokenValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordTokenValidationError{}

// Validate checks the field values on ForgotPassswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPassswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPassswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPassswordResponseMultiError, or nil if none found.
func (m *ForgotPassswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPassswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRedirectLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPassswordResponseValidationError{
					field:  "RedirectLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPassswordResponseValidationError{
					field:  "RedirectLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedirectLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPassswordResponseValidationError{
				field:  "RedirectLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPassswordResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPassswordResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPassswordResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSuccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForgotPassswordResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForgotPassswordResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForgotPassswordResponseValidationError{
				field:  "Success",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForgotPassswordResponseMultiError(errors)
	}
	return nil
}

// ForgotPassswordResponseMultiError is an error wrapping multiple validation
// errors returned by ForgotPassswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ForgotPassswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPassswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPassswordResponseMultiError) AllErrors() []error { return m }

// ForgotPassswordResponseValidationError is the validation error returned by
// ForgotPassswordResponse.Validate if the designated constraints aren't met.
type ForgotPassswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPassswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPassswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPassswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPassswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPassswordResponseValidationError) ErrorName() string {
	return "ForgotPassswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPassswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPassswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPassswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPassswordResponseValidationError{}

// Validate checks the field values on ResetPasswordData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordDataMultiError, or nil if none found.
func (m *ResetPasswordData) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordDataValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "NewPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "NewPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordDataValidationError{
				field:  "NewPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfirmPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "ConfirmPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "ConfirmPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirmPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordDataValidationError{
				field:  "ConfirmPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetPasswordDataValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordDataValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResetPasswordDataMultiError(errors)
	}
	return nil
}

// ResetPasswordDataMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordData.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordDataMultiError) AllErrors() []error { return m }

// ResetPasswordDataValidationError is the validation error returned by
// ResetPasswordData.Validate if the designated constraints aren't met.
type ResetPasswordDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordDataValidationError) ErrorName() string {
	return "ResetPasswordDataValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordDataValidationError{}

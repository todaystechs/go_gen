// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: quote.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QuoteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuoteRequestMultiError, or
// nil if none found.
func (m *QuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuoteId

	// no validation rules for RequesterId

	// no validation rules for BusinessId

	// no validation rules for Mode

	// no validation rules for LiablePartyId

	if all {
		switch v := interface{}(m.GetShippingDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuoteRequestValidationError{
					field:  "ShippingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuoteRequestValidationError{
					field:  "ShippingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuoteRequestValidationError{
				field:  "ShippingDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCommodities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuoteRequestValidationError{
						field:  fmt.Sprintf("Commodities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuoteRequestValidationError{
						field:  fmt.Sprintf("Commodities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuoteRequestValidationError{
					field:  fmt.Sprintf("Commodities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuoteRequestMultiError(errors)
	}
	return nil
}

// QuoteRequestMultiError is an error wrapping multiple validation errors
// returned by QuoteRequest.ValidateAll() if the designated constraints aren't met.
type QuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuoteRequestMultiError) AllErrors() []error { return m }

// QuoteRequestValidationError is the validation error returned by
// QuoteRequest.Validate if the designated constraints aren't met.
type QuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuoteRequestValidationError) ErrorName() string { return "QuoteRequestValidationError" }

// Error satisfies the builtin error interface
func (e QuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuoteRequestValidationError{}

// Validate checks the field values on QuoteBidData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuoteBidData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuoteBidData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuoteBidDataMultiError, or
// nil if none found.
func (m *QuoteBidData) ValidateAll() error {
	return m.validate(true)
}

func (m *QuoteBidData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuoteId

	// no validation rules for Sk

	if all {
		switch v := interface{}(m.GetCarrier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuoteBidDataValidationError{
					field:  "Carrier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuoteBidDataValidationError{
					field:  "Carrier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCarrier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuoteBidDataValidationError{
				field:  "Carrier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuoteBidDataValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuoteBidDataValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuoteBidDataValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransitTime

	// no validation rules for Guranteed

	if len(errors) > 0 {
		return QuoteBidDataMultiError(errors)
	}
	return nil
}

// QuoteBidDataMultiError is an error wrapping multiple validation errors
// returned by QuoteBidData.ValidateAll() if the designated constraints aren't met.
type QuoteBidDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuoteBidDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuoteBidDataMultiError) AllErrors() []error { return m }

// QuoteBidDataValidationError is the validation error returned by
// QuoteBidData.Validate if the designated constraints aren't met.
type QuoteBidDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuoteBidDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuoteBidDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuoteBidDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuoteBidDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuoteBidDataValidationError) ErrorName() string { return "QuoteBidDataValidationError" }

// Error satisfies the builtin error interface
func (e QuoteBidDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuoteBidData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuoteBidDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuoteBidDataValidationError{}

// Validate checks the field values on QuoteBids with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuoteBids) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuoteBids with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuoteBidsMultiError, or nil
// if none found.
func (m *QuoteBids) ValidateAll() error {
	return m.validate(true)
}

func (m *QuoteBids) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuoteRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuoteBidsValidationError{
					field:  "QuoteRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuoteBidsValidationError{
					field:  "QuoteRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuoteRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuoteBidsValidationError{
				field:  "QuoteRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQuoteBids() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuoteBidsValidationError{
						field:  fmt.Sprintf("QuoteBids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuoteBidsValidationError{
						field:  fmt.Sprintf("QuoteBids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuoteBidsValidationError{
					field:  fmt.Sprintf("QuoteBids[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuoteBidsMultiError(errors)
	}
	return nil
}

// QuoteBidsMultiError is an error wrapping multiple validation errors returned
// by QuoteBids.ValidateAll() if the designated constraints aren't met.
type QuoteBidsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuoteBidsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuoteBidsMultiError) AllErrors() []error { return m }

// QuoteBidsValidationError is the validation error returned by
// QuoteBids.Validate if the designated constraints aren't met.
type QuoteBidsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuoteBidsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuoteBidsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuoteBidsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuoteBidsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuoteBidsValidationError) ErrorName() string { return "QuoteBidsValidationError" }

// Error satisfies the builtin error interface
func (e QuoteBidsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuoteBids.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuoteBidsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuoteBidsValidationError{}

// Validate checks the field values on FetchQuotes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchQuotes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchQuotes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FetchQuotesMultiError, or
// nil if none found.
func (m *FetchQuotes) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchQuotes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartFrom

	// no validation rules for EndOn

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return FetchQuotesMultiError(errors)
	}
	return nil
}

// FetchQuotesMultiError is an error wrapping multiple validation errors
// returned by FetchQuotes.ValidateAll() if the designated constraints aren't met.
type FetchQuotesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchQuotesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchQuotesMultiError) AllErrors() []error { return m }

// FetchQuotesValidationError is the validation error returned by
// FetchQuotes.Validate if the designated constraints aren't met.
type FetchQuotesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchQuotesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchQuotesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchQuotesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchQuotesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchQuotesValidationError) ErrorName() string { return "FetchQuotesValidationError" }

// Error satisfies the builtin error interface
func (e FetchQuotesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchQuotes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchQuotesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchQuotesValidationError{}

// Validate checks the field values on Quotes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quotes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quotes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuotesMultiError, or nil if none found.
func (m *Quotes) ValidateAll() error {
	return m.validate(true)
}

func (m *Quotes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuoteRequets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuotesValidationError{
						field:  fmt.Sprintf("QuoteRequets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuotesValidationError{
						field:  fmt.Sprintf("QuoteRequets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuotesValidationError{
					field:  fmt.Sprintf("QuoteRequets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuotesMultiError(errors)
	}
	return nil
}

// QuotesMultiError is an error wrapping multiple validation errors returned by
// Quotes.ValidateAll() if the designated constraints aren't met.
type QuotesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotesMultiError) AllErrors() []error { return m }

// QuotesValidationError is the validation error returned by Quotes.Validate if
// the designated constraints aren't met.
type QuotesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotesValidationError) ErrorName() string { return "QuotesValidationError" }

// Error satisfies the builtin error interface
func (e QuotesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotesValidationError{}

// Validate checks the field values on DeleteQuoteData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteQuoteData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteQuoteData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteQuoteDataMultiError, or nil if none found.
func (m *DeleteQuoteData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteQuoteData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuoteId

	if len(errors) > 0 {
		return DeleteQuoteDataMultiError(errors)
	}
	return nil
}

// DeleteQuoteDataMultiError is an error wrapping multiple validation errors
// returned by DeleteQuoteData.ValidateAll() if the designated constraints
// aren't met.
type DeleteQuoteDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteQuoteDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteQuoteDataMultiError) AllErrors() []error { return m }

// DeleteQuoteDataValidationError is the validation error returned by
// DeleteQuoteData.Validate if the designated constraints aren't met.
type DeleteQuoteDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQuoteDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQuoteDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQuoteDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQuoteDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQuoteDataValidationError) ErrorName() string { return "DeleteQuoteDataValidationError" }

// Error satisfies the builtin error interface
func (e DeleteQuoteDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQuoteData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQuoteDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQuoteDataValidationError{}
